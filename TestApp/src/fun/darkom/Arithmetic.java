package fun.darkom;

public class Arithmetic {

    /*
           ++ (инкремент), -- (декремент)
           * (умножение), / (деление), % (остаток от деления)
           + (сложение), - (вычитание)
           */

    public Arithmetic(){
        int a = 10;
        int b = 7;
        // +
        int c = a + b;  // 17
        int d = 4 + b;  // 11
        // -
        int e = a - b;  // 3
        int f = 4 - a;  // -6
        // *
        int g = a * b;  // 70
        int h = b * 5;  // 35
        // :
        int i = a / b;  // 1(1,412) Целое число
        double j = 22.5 / 4.5;  // 5.0
        double k = 10 / 4;     // 2
        double l = 10.0 / 4;     // 2.5
        // % (Остаток)
        int m = a % b;  // 3
        int n = 22 % 4; // 2 (22 - 4*5 = 2)

//        System.out.println(i);
    }
    public void Icrement(){
        int a = 8;
//      префиксный инкремент
        int b = ++a;
        System.out.println(a);  // 9
        System.out.println(b);  // 9
//      постфиксный инкремент
        int c = a++;
        System.out.println(a);  // 10
        System.out.println(c);  // 9
//      префиксный инкремент
        int d = --a;
        System.out.println(a);  // 9
        System.out.println(d);  // 9
//      постфиксный инкремент
        int e = a--;
        System.out.println(a);  // 8
        System.out.println(e);  // 9
    }

    public void Bitwise(){
        byte b = 7;     // 0000 0111 - 1 байт - 8 бит(разрядов)
        short s = 7;    // 0000 0000 0000 0111 - 2 байта - 16 бит(разрядов)

        // & (логическое умножение)
        int a1 = 2; //010
        int b1 = 5;//101
        System.out.println(a1&b1); // результат 0
        /* 010
            ***
            101
            ===
            000
         */
        int a2 = 4; //100
        int b2 = 5; //101
        System.out.println(a2 & b2); // результат 4
        /* 100
            ***
            101
            ===
            100 = 4
         */
        // | (логическое сложение)
        int a3 = 2; //010
        int b3 = 5;//101
        System.out.println(a3|b3); // результат 7 - 111
        int a4 = 4; //100
        int b4 = 5;//101
        System.out.println(a4 | b4); // результат 5 - 101
//        ^ (логическое исключающее ИЛИ)(XOR)
        int number = 45; // 1001 Значение, которое надо зашифровать - в двоичной форме 101101
        int key = 102; //Ключ шифрования - в двоичной системе 1100110
        int encrypt = number ^ key; //Результатом будет число 1001011 или 75
        System.out.println("Зашифрованное число: " +encrypt);

        int decrypt = encrypt ^ key; // Результатом будет исходное число 45
        System.out.println("Расшифрованное число: " + decrypt);
//        ~ (логическое отрицание)
        byte a = 12;                 // 0000 1100
        System.out.println(~a);     //  1111 0011   или -13

        /*
        a<<b - сдвигает число a влево на b разрядов. Например, выражение 4<<1 сдвигает число 4
        (которое в двоичном представлении 100) на один разряд влево, в результате получается число 1000
        или число 8 в десятичном представлении.
        a>>b - смещает число a вправо на b разрядов. Например, 16>>1 сдвигает число 16
        (которое в двоичной системе 10000) на один разряд вправо, то есть в итоге получается 1000
        или число 8 в десятичном представлении.
        a>>>b - в отличие от предыдущих типов сдвигов данная операция представляет беззнаковый сдвиг -
        сдвигает число a вправо на b разрядов. Например, выражение -8>>>2 будет равно 1073741822.
         */
    }

}
