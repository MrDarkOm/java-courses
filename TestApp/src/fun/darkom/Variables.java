package fun.darkom;

public class Variables {

    public Variables() {

        //    boolean: хранит значение true или false
        boolean isActive = false, isAlive = true;
//    byte: хранит целое число от -128 до 127 и занимает 1 байт
        byte a = 3, b = 8;
//    short: хранит целое число от -32768 до 32767 и занимает 2 байта
        short c = 3, d = 8;
//    int: хранит целое число от -2147483648 до 2147483647 и занимает 4 байта
        int e = 4, f = 9;
//    long: хранит целое число от –9 223 372 036 854 775 808 до 9 223 372 036 854 775 807 и занимает 8 байт
        long g = 5, h = 10;
//    double: хранит число с плавающей точкой от ±4.9*10-324 до ±1.8*10308 и занимает 8 байт
        double i = 8.5, j = 2.7;
//    В качестве разделителя целой и дробной части в дробных литералах используется точка.
//    float: хранит число с плавающей точкой от -3.4*1038 до 3.4*1038 и занимает 4 байта
        float k = 8.5F, l = 2.7F;
//    char: хранит одиночный символ в кодировке UTF-16 и занимает 2 байта, поэтому диапазон хранимых значений от 0 до 65535
        char m = 'A';

        byte n = 1;
        short o = 2;
        long p = 2121;
        long num = 2147483649L; //добавить к числу суффикс l или L, который указывает, что число представляет тип long

        int num111 = 0x6F; // 16-тиричная система, число 111
        int num8 = 010; // 8-ричная система, число 8
        int num13 = 0b1101; // 2-ичная система, число 13

        int q = 123_456; // 123456
        int r = 234_567__789; // 234567789

        float fl = 30.6F;//добавить к числу суффикс f или F, который указывает, что число представляет тип Float
        double db = 30.6;

        char ch = 102; // символ 'f'
        char chr = '\u0066'; // символ f в шестнадцатеричной форме

        // char = 'a' != String = "a";

        String hello = "Hello...";
    /*
    Кроме собствено символов, которые представляют буквы, цифры, знаки препинания, прочие символы,
    есть специальные наборы символов, которые называют управляющими последовательностями.
    Например, самая популярная последовательность - "\n". Она выполняет перенос на следующую строку.
    В данном случае последовательность \n будет сигналом, что необходимо сделать перевод на следующую строку.
    Например:
    */
        String text = "Hello \nworld";

    /*
    С помощью операции + мы можем присоединить к одному тексту другой, причем продолжение текста может располагаться на следующей строке.
    Чтобы при выводе текста происходил перенос на следующую строку, применяется последовательность \n.
     */
        String text2 = "Вот мысль, которой весь я предан,\n" +
                "Итог всего, что ум скопил.\n" +
                "Лишь тот, кем бой за жизнь изведан,\n" +
                "Жизнь и свободу заслужил.";
    /*
    JDK 15 Only
    String text = """
                Вот мысль, которой весь я предан,
                Итог всего, что ум скопил.
                Лишь тот, кем бой за жизнь изведан,
                Жизнь и свободу заслужил.
                """;
     */
        System.out.println(text2);
    }
}
